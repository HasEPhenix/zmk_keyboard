/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

//CONFIG_ZMK_SETTINGS_SAVE_DEBOUNCE=1000
//CONFIG_ZMK_RGB_UNDERGLOW_AUTO_OFF_IDLE=y
//CONFIG_ZMK_RGB_UNDERGLOW_AUTO_OFF_USB=y

&led_strip {
    chain-length = <28>;

    // chain-length = <28>;
    // 22 backlight + 6 glowlight
};

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  GUI |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   | GUI/] |
            //        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |CTRL/'|
            //        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT |
            //                           | RSE | SPC | LWR |   | LWR | BKSP | RSE |

            bindings = <
&lt 3 TAB  &kp Q           &kp W           &kp E    &kp R               &kp T               &kp T           &mt LEFT_SHIFT LEFT_BRACKET  &kp Z          &kp U      &kp I    &kp O      &kp P          &lt 3 RIGHT_BRACKET
           &lt 0 A         &kp S           &kp D    &lt 4 F             &kp G               &sk LEFT_ALT    &lt 3 ESCAPE                 &kp H          &kp J      &kp K    &kp L      &kp SEMICOLON
           &mt LEFT_GUI Y  &mt LEFT_GUI X  &lt 2 C  &mt LEFT_COMMAND V  &mt LEFT_COMMAND B  &kp INSERT      &kp INSERT                   &kp N          &kp M      &kp DOT  &kp COMMA  &kp MINUS
                                                    &lt 1 RETURN        &mt LSHIFT SPACE    &lt 3 TAB       &lt 1 K_CONTEXT_MENU         &kp BACKSPACE  &lt 2 DEL
            >;
        };

        ARROWS {
            // -----------------------------------------------------------------------------------------
            // |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            //       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
            //       |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp C_BRIGHTNESS_INC  &kp K_VOLUME_UP     &kp PAGE_UP    &kp HOME   &kp HOME      &kp AT_SIGN        &kp F6     &kp F7    &kp F8     &kp F9    &kp F10   &kp F11          &mt RGUI F12
        &kp LEFT              &kp DOWN            &kp UP_ARROW   &kp RIGHT  &kp QUESTION  &kp EXCLAMATION    &kp CARET  &kp AMPS  &kp STAR   &kp LPAR  &kp RPAR  &mt RCTRL MINUS
        &kp C_BRIGHTNESS_DEC  &kp K_VOLUME_DOWN2  &kp PAGE_DOWN  &kp END    &mo 4         &trans             &kp N6     &kp N7    &kp N8     &kp N9    &kp N0    &trans
                                                                 &trans     &trans        &trans             &trans     &trans    &lt 3 DEL
            >;
        };

        Zahlenzauber {
            bindings = <
&kp N0  &kp N6        &kp N7    &kp N8        &kp N9          &kp N0  &kp KP_MULTIPLY    &trans        &trans            &kp F9        &kp F10  &kp F11  &kp F12  &kp LEFT_CONTROL
        &kp N1        &kp N2    &kp N3        &kp N4          &kp N5  &kp KP_DIVIDE      &trans        &trans            &kp F5        &kp F6   &kp F7   &kp F8
        &kp KP_MINUS  &kp PLUS  &kp KP_EQUAL  &trans          &kp N0  &trans             &kp LEFT_GUI  &kp LEFT_SHIFT    &kp F1        &kp F2   &kp F3   &kp F4
                                              &kp LEFT_SHIFT  &trans  &trans             &kp INS       &kp LEFT_CONTROL  &kp LEFT_ALT
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | RST | BLDR |     |     |OUTTG|     |SFTOFF|   |SFTOFF|     |OUTTG|     |     | BLDR | RST |
            //       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |     | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            //       | LED+ | LED-|LED_M|LEDS+|LEDS-|     |     |     |     |     |     |     |      |
            //                          |     |     |     |     |     |     |     |

            bindings = <
&sys_reset  &bootloader     &none            &trans           &out OUT_TOG     &none            &trans          &soft_off     &none         &out OUT_TOG  &none         &none         &bootloader  &sys_reset
            &bt BT_CLR      &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
            &rgb_ug RGB_ON  &rgb_ug RGB_OFF  &rgb_ug RGB_EFF  &rgb_ug RGB_SPI  &rgb_ug RGB_SPD  &none           &none         &none         &none         &none         &none         &none
                                                              &bt BT_DISC 0    &bt BT_DISC 4    &soft_off       &soft_off     &none         &trans
            >;
        };

        Friedrich {
            bindings = <
&trans  &trans  &kp C_MEDIA_COMPUTER  &kp LG(C_AL_DOCUMENTS)                 &trans       &trans           &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &kp LA(F4)            &kp LG(D)                              &trans       &kp LEFT_GUI     &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans                &kp LG(C_AC_DESKTOP_SHOW_ALL_WINDOWS)  &trans       &trans           &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                                                             &kp LA(TAB)  &kp LS(LA(TAB))  &trans    &trans  &trans  &trans
            >;
        };

        Einhand-Alpha {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
